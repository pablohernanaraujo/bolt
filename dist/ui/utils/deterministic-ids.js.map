{"version":3,"file":"deterministic-ids.js","sources":["../../../src/ui/utils/deterministic-ids.ts"],"sourcesContent":["let globalIdCounter = 0;\nconst componentCounters = new Map();\nconst idCache = new Map();\nconst DEFAULT_CONFIG = {\n    prefix: 'ds',\n    includeComponent: true,\n    useCache: true,\n    separator: '-',\n    resetPerInstance: false,\n};\nexport function resetIdGeneration() {\n    globalIdCounter = 0;\n    componentCounters.clear();\n    idCache.clear();\n}\nexport function generateDeterministicId(componentName, purpose, key, config = {}) {\n    const finalConfig = {\n        ...DEFAULT_CONFIG,\n        ...config,\n    };\n    const cacheKey = finalConfig.useCache && key ? `${componentName}-${purpose}-${key}` : '';\n    if (cacheKey && idCache.has(cacheKey)) {\n        return idCache.get(cacheKey);\n    }\n    const parts = [];\n    if (finalConfig.prefix) {\n        parts.push(finalConfig.prefix);\n    }\n    if (finalConfig.includeComponent) {\n        parts.push(componentName.toLowerCase());\n    }\n    parts.push(purpose.toLowerCase());\n    let counter;\n    if (finalConfig.resetPerInstance) {\n        const counterKey = `${componentName}-${purpose}`;\n        counter = (componentCounters.get(counterKey) || 0) + 1;\n        componentCounters.set(counterKey, counter);\n    }\n    else {\n        counter = ++globalIdCounter;\n    }\n    parts.push(counter.toString());\n    const id = parts.join(finalConfig.separator);\n    if (cacheKey) {\n        idCache.set(cacheKey, id);\n    }\n    return id;\n}\nexport function generateFormFieldIds(componentName, fieldName) {\n    const key = fieldName || '';\n    return {\n        field: generateDeterministicId(componentName, 'field', key),\n        input: generateDeterministicId(componentName, 'input', key),\n        label: generateDeterministicId(componentName, 'label', key),\n        error: generateDeterministicId(componentName, 'error', key),\n        helpText: generateDeterministicId(componentName, 'help', key),\n    };\n}\nexport function generateAriaIds(componentName, elementName, key) {\n    const baseKey = key || elementName;\n    return {\n        element: generateDeterministicId(componentName, elementName, baseKey),\n        labelledBy: generateDeterministicId(componentName, `${elementName}-labelledby`, baseKey),\n        describedBy: generateDeterministicId(componentName, `${elementName}-describedby`, baseKey),\n        controls: generateDeterministicId(componentName, `${elementName}-controls`, baseKey),\n    };\n}\nexport function generateComplexComponentIds(componentName, elements, key) {\n    const ids = {};\n    elements.forEach((element) => {\n        ids[element] = generateDeterministicId(componentName, element, key);\n    });\n    return ids;\n}\nexport function createDeterministicIdHook(componentName) {\n    return function useDeterministicId(purpose = 'element', key) {\n        if (typeof window === 'undefined') {\n            return generateDeterministicId(componentName, purpose, key);\n        }\n        const cacheKey = `${componentName}-${purpose}-${key || ''}`;\n        if (!idCache.has(cacheKey)) {\n            const id = generateDeterministicId(componentName, purpose, key);\n            idCache.set(cacheKey, id);\n        }\n        return idCache.get(cacheKey);\n    };\n}\nexport function validateDeterministicId(id) {\n    if (!id || typeof id !== 'string') {\n        return false;\n    }\n    const nonDeterministicPatterns = [\n        /Math\\.random/,\n        /Date\\.now/,\n        /timestamp/i,\n        /uuid/i,\n        /[0-9]{13,}/,\n    ];\n    return !nonDeterministicPatterns.some((pattern) => pattern.test(id));\n}\nexport function getIdGenerationStats() {\n    return {\n        globalCounter: globalIdCounter,\n        componentCounters: Object.fromEntries(componentCounters),\n        cacheSize: idCache.size,\n    };\n}\nexport class ComponentIdGenerator {\n    componentName;\n    instanceKey;\n    localCounter = 0;\n    constructor(componentName, instanceKey) {\n        this.componentName = componentName;\n        this.instanceKey = instanceKey || '';\n    }\n    generateId(purpose) {\n        this.localCounter++;\n        const parts = [\n            DEFAULT_CONFIG.prefix,\n            this.componentName.toLowerCase(),\n            purpose.toLowerCase(),\n        ];\n        if (this.instanceKey) {\n            parts.push(this.instanceKey);\n        }\n        parts.push(this.localCounter.toString());\n        return parts.join(DEFAULT_CONFIG.separator);\n    }\n    generateFormFieldIds() {\n        return {\n            field: this.generateId('field'),\n            input: this.generateId('input'),\n            label: this.generateId('label'),\n            error: this.generateId('error'),\n            helpText: this.generateId('help'),\n        };\n    }\n    generateAriaIds(elementName) {\n        return {\n            element: this.generateId(elementName),\n            labelledBy: this.generateId(`${elementName}-labelledby`),\n            describedBy: this.generateId(`${elementName}-describedby`),\n            controls: this.generateId(`${elementName}-controls`),\n        };\n    }\n}\nexport function createPrefixedIdGenerator(prefix) {\n    return {\n        generate: (componentName, purpose, key) => generateDeterministicId(componentName, purpose, key, { prefix }),\n        generateFormFields: (componentName, fieldName) => {\n            const key = fieldName || '';\n            return {\n                field: generateDeterministicId(componentName, 'field', key, { prefix }),\n                input: generateDeterministicId(componentName, 'input', key, { prefix }),\n                label: generateDeterministicId(componentName, 'label', key, { prefix }),\n                error: generateDeterministicId(componentName, 'error', key, { prefix }),\n                helpText: generateDeterministicId(componentName, 'help', key, {\n                    prefix,\n                }),\n            };\n        },\n    };\n}\nif (typeof window === 'undefined') {\n    resetIdGeneration();\n}\n"],"names":[],"mappings":"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"}