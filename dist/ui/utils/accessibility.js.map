{"version":3,"file":"accessibility.js","sources":["../../../src/ui/utils/accessibility.ts"],"sourcesContent":["import { ComponentIdGenerator, generateAriaIds, generateDeterministicId, generateFormFieldIds, } from './deterministic-ids';\nexport function generateFormFieldAccessibility(config) {\n    const { componentName, fieldName, isRequired = false, hasError = false, isDisabled = false, isReadOnly = false, ariaLabel, ariaDescription, additionalAria = {}, } = config;\n    const ids = generateFormFieldIds(componentName, fieldName);\n    const describedBy = [];\n    if (hasError) {\n        describedBy.push(ids.error);\n    }\n    describedBy.push(ids.helpText);\n    return {\n        field: {\n            'data-field': componentName,\n            'data-testid': `${componentName}-field${fieldName ? `-${fieldName}` : ''}`,\n        },\n        input: {\n            id: ids.input,\n            'aria-labelledby': ids.label,\n            'aria-describedby': describedBy.length > 0 ? describedBy.join(' ') : undefined,\n            'aria-required': isRequired ? 'true' : undefined,\n            'aria-invalid': hasError ? 'true' : 'false',\n            'aria-disabled': isDisabled ? 'true' : undefined,\n            'aria-readonly': isReadOnly ? 'true' : undefined,\n            'aria-label': ariaLabel,\n            'data-testid': `${componentName}-input${fieldName ? `-${fieldName}` : ''}`,\n            ...additionalAria,\n        },\n        label: {\n            id: ids.label,\n            htmlFor: ids.input,\n            'data-testid': `${componentName}-label${fieldName ? `-${fieldName}` : ''}`,\n        },\n        error: {\n            id: ids.error,\n            role: 'alert',\n            'aria-live': 'polite',\n            'aria-atomic': 'true',\n            'data-testid': `${componentName}-error${fieldName ? `-${fieldName}` : ''}`,\n        },\n        helpText: {\n            id: ids.helpText,\n            'data-testid': `${componentName}-help${fieldName ? `-${fieldName}` : ''}`,\n        },\n    };\n}\nexport function generateInteractiveAccessibility(config) {\n    const { componentName, elementName, isPressed, isExpanded, hasPopup, controls, ariaLabel, liveRegion, additionalAria = {}, } = config;\n    const ariaIds = generateAriaIds(componentName, elementName);\n    return {\n        id: ariaIds.element,\n        'aria-label': ariaLabel,\n        'aria-pressed': isPressed !== undefined ? (isPressed ? 'true' : 'false') : undefined,\n        'aria-expanded': isExpanded !== undefined ? (isExpanded ? 'true' : 'false') : undefined,\n        'aria-haspopup': hasPopup !== undefined && hasPopup !== false\n            ? typeof hasPopup === 'boolean'\n                ? 'true'\n                : hasPopup\n            : undefined,\n        'aria-controls': controls || ariaIds.controls,\n        'aria-live': liveRegion,\n        'data-testid': `${componentName}-${elementName}`,\n        ...additionalAria,\n    };\n}\nexport function generateCollectionAccessibility(config) {\n    const { componentName, totalItems, selectedItems = [], isMultiSelect = false, orientation = 'vertical', ariaLabel, isSearchable = false, } = config;\n    const containerId = generateDeterministicId(componentName, 'container');\n    return {\n        container: {\n            id: containerId,\n            role: isMultiSelect ? 'listbox' : 'list',\n            'aria-label': ariaLabel,\n            'aria-multiselectable': isMultiSelect ? 'true' : undefined,\n            'aria-orientation': orientation,\n            'aria-activedescendant': selectedItems.length > 0\n                ? generateDeterministicId(componentName, 'item', selectedItems[0].toString())\n                : undefined,\n            'data-testid': `${componentName}-container`,\n        },\n        item: (index, isSelected = false) => ({\n            id: generateDeterministicId(componentName, 'item', index.toString()),\n            role: isMultiSelect ? 'option' : 'listitem',\n            'aria-selected': isMultiSelect || isSelected\n                ? isSelected\n                    ? 'true'\n                    : 'false'\n                : undefined,\n            'aria-setsize': totalItems,\n            'aria-posinset': index + 1,\n            'data-testid': `${componentName}-item-${index}`,\n        }),\n    };\n}\nexport function generateDialogAccessibility(config) {\n    const { componentName, isModal = true, title, description } = config;\n    const dialogId = generateDeterministicId(componentName, 'dialog');\n    const titleId = generateDeterministicId(componentName, 'title');\n    const descriptionId = generateDeterministicId(componentName, 'description');\n    const labelledBy = title ? titleId : undefined;\n    const describedBy = description ? descriptionId : undefined;\n    return {\n        dialog: {\n            id: dialogId,\n            role: 'dialog',\n            'aria-modal': isModal ? 'true' : undefined,\n            'aria-labelledby': labelledBy,\n            'aria-describedby': describedBy,\n            'data-testid': `${componentName}-dialog`,\n        },\n        title: {\n            id: titleId,\n            'data-testid': `${componentName}-title`,\n        },\n        description: {\n            id: descriptionId,\n            'data-testid': `${componentName}-description`,\n        },\n    };\n}\nexport const screenReader = {\n    onlyStyles: {\n        position: 'absolute',\n        width: '1px',\n        height: '1px',\n        padding: 0,\n        margin: '-1px',\n        overflow: 'hidden',\n        clip: 'rect(0, 0, 0, 0)',\n        whiteSpace: 'nowrap',\n        border: 0,\n    },\n    focusableStyles: {\n        position: 'absolute',\n        left: '-10000px',\n        top: 'auto',\n        width: '1px',\n        height: '1px',\n        overflow: 'hidden',\n    },\n    announce: (message, priority = 'polite') => {\n        if (typeof window === 'undefined')\n            return;\n        const announcement = document.createElement('div');\n        announcement.setAttribute('aria-live', priority);\n        announcement.setAttribute('aria-atomic', 'true');\n        announcement.style.cssText = Object.entries(screenReader.onlyStyles)\n            .map(([prop, value]) => `${prop}: ${value}`)\n            .join('; ');\n        document.body.appendChild(announcement);\n        announcement.textContent = message;\n        setTimeout(() => {\n            document.body.removeChild(announcement);\n        }, 1000);\n    },\n};\nexport const keyboard = {\n    keys: {\n        ARROW_UP: 'ArrowUp',\n        ARROW_DOWN: 'ArrowDown',\n        ARROW_LEFT: 'ArrowLeft',\n        ARROW_RIGHT: 'ArrowRight',\n        HOME: 'Home',\n        END: 'End',\n        PAGE_UP: 'PageUp',\n        PAGE_DOWN: 'PageDown',\n        ENTER: 'Enter',\n        SPACE: ' ',\n        TAB: 'Tab',\n        ESCAPE: 'Escape',\n        DELETE: 'Delete',\n        BACKSPACE: 'Backspace',\n    },\n    isFocusable: (element) => {\n        if (element.hasAttribute('disabled') ||\n            element.getAttribute('aria-hidden') === 'true') {\n            return false;\n        }\n        const focusableSelectors = [\n            'input:not([disabled])',\n            'button:not([disabled])',\n            'select:not([disabled])',\n            'textarea:not([disabled])',\n            'a[href]',\n            '[tabindex]:not([tabindex=\"-1\"])',\n            '[contenteditable=\"true\"]',\n        ];\n        return focusableSelectors.some((selector) => element.matches(selector));\n    },\n    getFocusableElements: (container) => {\n        const focusableSelectors = [\n            'input:not([disabled]):not([aria-hidden=\"true\"])',\n            'button:not([disabled]):not([aria-hidden=\"true\"])',\n            'select:not([disabled]):not([aria-hidden=\"true\"])',\n            'textarea:not([disabled]):not([aria-hidden=\"true\"])',\n            'a[href]:not([aria-hidden=\"true\"])',\n            '[tabindex]:not([tabindex=\"-1\"]):not([aria-hidden=\"true\"])',\n            '[contenteditable=\"true\"]:not([aria-hidden=\"true\"])',\n        ].join(', ');\n        return Array.from(container.querySelectorAll(focusableSelectors)).filter((element) => keyboard.isFocusable(element));\n    },\n    trapFocus: (container, event) => {\n        if (event.key !== keyboard.keys.TAB)\n            return;\n        const focusableElements = keyboard.getFocusableElements(container);\n        if (focusableElements.length === 0)\n            return;\n        const firstElement = focusableElements[0];\n        const lastElement = focusableElements[focusableElements.length - 1];\n        if (event.shiftKey) {\n            if (document.activeElement === firstElement) {\n                event.preventDefault();\n                lastElement.focus();\n            }\n        }\n        else {\n            if (document.activeElement === lastElement) {\n                event.preventDefault();\n                firstElement.focus();\n            }\n        }\n    },\n};\nexport const focus = {\n    setById: (id, delay = 0) => {\n        if (typeof window === 'undefined')\n            return;\n        const focusElement = () => {\n            const element = document.getElementById(id);\n            if (element && keyboard.isFocusable(element)) {\n                element.focus();\n            }\n        };\n        if (delay > 0) {\n            setTimeout(focusElement, delay);\n        }\n        else {\n            focusElement();\n        }\n    },\n    createTrap: (container) => {\n        if (!container || typeof window === 'undefined') {\n            return {\n                activate: () => { },\n                deactivate: () => { },\n            };\n        }\n        let isActive = false;\n        let previousActiveElement = null;\n        let cleanup = null;\n        const activate = () => {\n            if (isActive)\n                return;\n            previousActiveElement = document.activeElement;\n            isActive = true;\n            const focusableElements = keyboard.getFocusableElements(container);\n            if (focusableElements.length > 0) {\n                focusableElements[0].focus();\n            }\n            const handleKeyDown = (event) => {\n                keyboard.trapFocus(container, event);\n            };\n            container.addEventListener('keydown', handleKeyDown);\n            cleanup = () => {\n                container.removeEventListener('keydown', handleKeyDown);\n            };\n        };\n        const deactivate = () => {\n            if (!isActive)\n                return;\n            isActive = false;\n            if (cleanup) {\n                cleanup();\n                cleanup = null;\n            }\n            if (previousActiveElement &&\n                keyboard.isFocusable(previousActiveElement)) {\n                previousActiveElement.focus();\n            }\n        };\n        return {\n            activate,\n            deactivate,\n        };\n    },\n};\nexport function createAccessibilityHelper(componentName) {\n    const idGenerator = new ComponentIdGenerator(componentName);\n    return {\n        idGenerator,\n        generateFormField: (fieldName) => generateFormFieldAccessibility({\n            componentName,\n            fieldName,\n        }),\n        generateInteractive: (elementName, config) => generateInteractiveAccessibility({\n            componentName,\n            elementName,\n            ...config,\n        }),\n        generateCollection: (config) => generateCollectionAccessibility({\n            componentName,\n            ...config,\n        }),\n        generateDialog: (config) => generateDialogAccessibility({\n            componentName,\n            ...config,\n        }),\n    };\n}\n"],"names":[],"mappings":";;AACO,SAAS,8BAA8B,CAAC,MAAM,EAAE;AACvD,IAAI,MAAM,EAAE,aAAa,EAAE,SAAS,EAAE,UAAU,GAAG,KAAK,EAAE,QAAQ,GAAG,KAAK,EAAE,UAAU,GAAG,KAAK,EAAE,UAAU,GAAG,KAAK,EAAE,SAAS,EAAmB,cAAc,GAAG,EAAE,GAAG,GAAG,MAAM;AAC/K,IAAI,MAAM,GAAG,GAAG,oBAAoB,CAAC,aAAa,EAAE,SAAS,CAAC;AAC9D,IAAI,MAAM,WAAW,GAAG,EAAE;AAC1B,IAAI,IAAI,QAAQ,EAAE;AAClB,QAAQ,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;AACnC,IAAI;AACJ,IAAI,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;AAClC,IAAI,OAAO;AACX,QAAQ,KAAK,EAAE;AACf,YAAY,YAAY,EAAE,aAAa;AACvC,YAAY,aAAa,EAAE,CAAC,EAAE,aAAa,CAAC,MAAM,EAAE,SAAS,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;AACtF,SAAS;AACT,QAAQ,KAAK,EAAE;AACf,YAAY,EAAE,EAAE,GAAG,CAAC,KAAK;AACzB,YAAY,iBAAiB,EAAE,GAAG,CAAC,KAAK;AACxC,YAAY,kBAAkB,EAAE,WAAW,CAAC,MAAM,GAAG,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS;AAC1F,YAAY,eAAe,EAAE,UAAU,GAAG,MAAM,GAAG,SAAS;AAC5D,YAAY,cAAc,EAAE,QAAQ,GAAG,MAAM,GAAG,OAAO;AACvD,YAAY,eAAe,EAAE,UAAU,GAAG,MAAM,GAAG,SAAS;AAC5D,YAAY,eAAe,EAAE,UAAU,GAAG,MAAM,GAAG,SAAS;AAC5D,YAAY,YAAY,EAAE,SAAS;AACnC,YAAY,aAAa,EAAE,CAAC,EAAE,aAAa,CAAC,MAAM,EAAE,SAAS,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;AACtF,YAAY,GAAG,cAAc;AAC7B,SAAS;AACT,QAAQ,KAAK,EAAE;AACf,YAAY,EAAE,EAAE,GAAG,CAAC,KAAK;AACzB,YAAY,OAAO,EAAE,GAAG,CAAC,KAAK;AAC9B,YAAY,aAAa,EAAE,CAAC,EAAE,aAAa,CAAC,MAAM,EAAE,SAAS,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;AACtF,SAAS;AACT,QAAQ,KAAK,EAAE;AACf,YAAY,EAAE,EAAE,GAAG,CAAC,KAAK;AACzB,YAAY,IAAI,EAAE,OAAO;AACzB,YAAY,WAAW,EAAE,QAAQ;AACjC,YAAY,aAAa,EAAE,MAAM;AACjC,YAAY,aAAa,EAAE,CAAC,EAAE,aAAa,CAAC,MAAM,EAAE,SAAS,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;AACtF,SAAS;AACT,QAAQ,QAAQ,EAAE;AAClB,YAAY,EAAE,EAAE,GAAG,CAAC,QAAQ;AAC5B,YAAY,aAAa,EAAE,CAAC,EAAE,aAAa,CAAC,KAAK,EAAE,SAAS,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;AACrF,SAAS;AACT,KAAK;AACL;;;;"}